name: PR Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  validate:
    name: Validate PR
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout PR code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Check for security vulnerabilities
      run: npm audit --audit-level=moderate
      continue-on-error: true
      
    - name: Run linting with auto-fix
      run: |
        npm run lint:fix
        # Check if there are any remaining linting issues
        npm run lint
        
    - name: Run type checking
      run: npm run typecheck
      continue-on-error: true
      
    - name: Run tests with coverage
      run: npm run test:coverage
      
    - name: Build project
      run: npm run build
      
    - name: Validate package can be packed
      run: |
        npm pack --dry-run
        echo "Package validation successful"
        
    - name: Check bundle size
      run: |
        echo "Checking bundle sizes..."
        ls -lh dist/
        echo "Main bundle sizes:"
        ls -lh dist/*.js | awk '{print $5 " " $9}'
        
    - name: Test integration scenarios
      run: npm run test:integration
      
    - name: Comment PR with results
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Read coverage summary if it exists
          let coverageInfo = '';
          try {
            const coverage = JSON.parse(fs.readFileSync('./coverage/coverage-summary.json', 'utf8'));
            const total = coverage.total;
            coverageInfo = `
          ## üìä Coverage Report
          - **Statements**: ${total.statements.pct}%
          - **Branches**: ${total.branches.pct}%
          - **Functions**: ${total.functions.pct}%
          - **Lines**: ${total.lines.pct}%
          `;
          } catch (e) {
            coverageInfo = '\n## üìä Coverage Report\nCoverage data not available';
          }
          
          const comment = `
          ## üîç PR Validation Results
          
          This PR has been automatically validated:
          
          - ‚úÖ Dependencies installed
          - ‚úÖ Linting passed
          - ‚úÖ Type checking completed
          - ‚úÖ Tests executed
          - ‚úÖ Build successful
          - ‚úÖ Package validation passed
          
          ${coverageInfo}
          
          ## üì¶ Build Artifacts
          All required build artifacts have been generated and validated.
          
          ---
          *This comment was automatically generated by the PR validation workflow.*
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  security-check:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif' 