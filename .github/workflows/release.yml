name: Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
        - prerelease
      prerelease_tag:
        description: 'Prerelease tag (alpha, beta, rc)'
        required: false
        default: 'alpha'
        type: string
  push:
    tags:
      - 'v*'

jobs:
  release:
    name: Release & Publish
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run full test suite
      run: |
        npm run lint
        npm test
        npm run build
        
    - name: Validate build artifacts
      run: |
        echo "Validating all required build artifacts exist..."
        test -f dist/index.js || exit 1
        test -f dist/index.esm.js || exit 1
        test -f dist/index.d.ts || exit 1
        test -f dist/client/websocket-logger.js || exit 1
        test -f dist/server/websocket-logger-server.js || exit 1
        test -f dist/plugins/vite-plugin.js || exit 1
        test -f dist/plugins/webpack-plugin.js || exit 1
        echo "All build artifacts validated!"
        
    - name: Determine version increment
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION_TYPE="${{ github.event.inputs.version_type }}"
          if [[ "$VERSION_TYPE" == "prerelease" ]]; then
            PRERELEASE_TAG="${{ github.event.inputs.prerelease_tag }}"
            echo "version_arg=--prerelease=$PRERELEASE_TAG" >> $GITHUB_OUTPUT
          else
            echo "version_arg=--$VERSION_TYPE" >> $GITHUB_OUTPUT
          fi
        else
          # For tag pushes, extract version from tag
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          echo "version_arg=--new-version=$TAG_VERSION" >> $GITHUB_OUTPUT
        fi
        
    - name: Bump version
      if: github.event_name == 'workflow_dispatch'
      run: |
        echo "Incrementing version with: ${{ steps.version.outputs.version_arg }}"
        npm version ${{ steps.version.outputs.version_arg }} --no-git-tag-version
        NEW_VERSION=$(node -p "require('./package.json').version")
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        echo "New version: $NEW_VERSION"
        
    - name: Extract version from tag
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        echo "NEW_VERSION=$TAG_VERSION" >> $GITHUB_ENV
        echo "Release version from tag: $TAG_VERSION"
        
    - name: Update package.json version for tag release
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        npm version $NEW_VERSION --no-git-tag-version
        
    - name: Rebuild with new version
      run: npm run build
      
    - name: Create release commit and tag
      if: github.event_name == 'workflow_dispatch'
      run: |
        git add package.json package-lock.json
        git commit -m "chore: bump version to v$NEW_VERSION"
        git tag "v$NEW_VERSION"
        git push origin main
        git push origin "v$NEW_VERSION"
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.NEW_VERSION }}
        release_name: Release v${{ env.NEW_VERSION }}
        body: |
          ## Changes in v${{ env.NEW_VERSION }}
          
          This release was automatically generated.
          
          ### Build Information
          - Node.js: 20.x
          - Tests: ✅ All passing
          - Build: ✅ Validated
          - Coverage: Generated
          
          ### Installation
          ```bash
          npm install llm-dom2file-logger@${{ env.NEW_VERSION }}
          ```
        draft: false
        prerelease: ${{ contains(env.NEW_VERSION, 'alpha') || contains(env.NEW_VERSION, 'beta') || contains(env.NEW_VERSION, 'rc') }}
        
    - name: Publish to npm
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
    - name: Post-publish validation
      run: |
        echo "Waiting for npm registry to update..."
        sleep 30
        
        # Verify the package was published
        PUBLISHED_VERSION=$(npm view llm-dom2file-logger version)
        echo "Published version: $PUBLISHED_VERSION"
        echo "Expected version: $NEW_VERSION"
        
        if [[ "$PUBLISHED_VERSION" == "$NEW_VERSION" ]]; then
          echo "✅ Package successfully published to npm!"
        else
          echo "❌ Version mismatch in npm registry"
          exit 1
        fi 