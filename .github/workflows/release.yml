name: Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
        - prerelease
      prerelease_tag:
        description: 'Prerelease tag (alpha, beta, rc)'
        required: false
        default: 'alpha'
        type: string
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  release:
    name: Release & Publish
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        persist-credentials: true
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Configure Git
      run: |
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run full test suite
      run: |
        npm run lint
        npm run build
        npm test
        
    - name: Validate build artifacts
      run: |
        echo "Validating all required build artifacts exist..."
        test -f dist/index.js || exit 1
        test -f dist/index.d.ts || exit 1
        test -f dist/client/websocket-logger.js || exit 1
        test -f dist/client/websocket-logger.d.ts || exit 1
        test -f dist/server/websocket-logger-server.js || exit 1
        test -f dist/server/websocket-logger-server.d.ts || exit 1
        test -f dist/plugins/vite-plugin.js || exit 1
        test -f dist/plugins/vite-plugin.d.ts || exit 1
        test -f dist/plugins/webpack-plugin.js || exit 1
        test -f dist/plugins/webpack-plugin.d.ts || exit 1
        echo "All build artifacts validated!"
        
    - name: Determine version increment
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION_TYPE="${{ github.event.inputs.version_type }}"
          if [[ "$VERSION_TYPE" == "prerelease" ]]; then
            PRERELEASE_TAG="${{ github.event.inputs.prerelease_tag }}"
            echo "version_arg=--prerelease=$PRERELEASE_TAG" >> $GITHUB_OUTPUT
          else
            echo "version_arg=--$VERSION_TYPE" >> $GITHUB_OUTPUT
          fi
        else
          # For tag pushes, extract version from tag
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          echo "version_arg=--new-version=$TAG_VERSION" >> $GITHUB_OUTPUT
        fi
        
    - name: Bump version
      if: github.event_name == 'workflow_dispatch'
      run: |
        echo "Incrementing version with: ${{ steps.version.outputs.version_arg }}"
        
        # Try to increment version, if it fails due to existing tag, try again
        MAX_ATTEMPTS=10
        ATTEMPT=1
        
        while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
          echo "Attempt $ATTEMPT: Incrementing version..."
          npm version ${{ steps.version.outputs.version_arg }} --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          
          # Check if this version tag already exists
          if git ls-remote --tags origin | grep -q "refs/tags/v$NEW_VERSION"; then
            echo "Version v$NEW_VERSION already exists, trying next increment..."
            # For prerelease, increment the prerelease number
            if [[ "$NEW_VERSION" == *"beta"* ]] || [[ "$NEW_VERSION" == *"alpha"* ]] || [[ "$NEW_VERSION" == *"rc"* ]]; then
              npm version prerelease --no-git-tag-version
            else
              npm version patch --no-git-tag-version
            fi
            ATTEMPT=$((ATTEMPT + 1))
          else
            echo "Found available version: $NEW_VERSION"
            break
          fi
        done
        
        if [ $ATTEMPT -gt $MAX_ATTEMPTS ]; then
          echo "Failed to find available version after $MAX_ATTEMPTS attempts"
          exit 1
        fi
        
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        echo "Final version: $NEW_VERSION"
        
    - name: Extract version from tag
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        echo "NEW_VERSION=$TAG_VERSION" >> $GITHUB_ENV
        echo "Release version from tag: $TAG_VERSION"
        
    - name: Update package.json version for tag release
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        npm version $NEW_VERSION --no-git-tag-version
        
    - name: Rebuild with new version
      run: npm run build
      
    - name: Create release commit and tag
      if: github.event_name == 'workflow_dispatch'
      run: |
        git add package.json package-lock.json
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "chore: bump version to v$NEW_VERSION"
        fi
        
        # Check if tag already exists and handle it
        if git tag -l "v$NEW_VERSION" | grep -q "v$NEW_VERSION"; then
          echo "Tag v$NEW_VERSION already exists locally, deleting it"
          git tag -d "v$NEW_VERSION"
        fi
        
        # Check if tag exists on remote
        if git ls-remote --tags origin | grep -q "refs/tags/v$NEW_VERSION"; then
          echo "Tag v$NEW_VERSION already exists on remote, deleting it"
          git push --delete origin "v$NEW_VERSION" || echo "Failed to delete remote tag, continuing..."
        fi
        
        git tag "v$NEW_VERSION"
        git push origin main
        git push origin "v$NEW_VERSION"
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.NEW_VERSION }}
        name: Release v${{ env.NEW_VERSION }}
        body: |
          ## Changes in v${{ env.NEW_VERSION }}
          
          This release was automatically generated.
          
          ### Build Information
          - Node.js: 20.x
          - Tests: ✅ All passing
          - Build: ✅ Validated (ES Modules + CommonJS)
          - Coverage: Generated
          
          ### Installation
          ```bash
          npm install visilog@${{ env.NEW_VERSION }}
          ```
          
          ### Module Support
          - ✅ ES Modules (`import`)
          - ✅ CommonJS (`require`)
          - ✅ TypeScript definitions
          - ✅ Dual build system
        draft: false
        prerelease: ${{ contains(env.NEW_VERSION, 'alpha') || contains(env.NEW_VERSION, 'beta') || contains(env.NEW_VERSION, 'rc') }}
        
    - name: Publish to npm
      run: |
        # Determine npm dist-tag based on version
        if [[ "$NEW_VERSION" == *"alpha"* ]]; then
          NPM_TAG="alpha"
        elif [[ "$NEW_VERSION" == *"beta"* ]]; then
          NPM_TAG="beta"
        elif [[ "$NEW_VERSION" == *"rc"* ]]; then
          NPM_TAG="rc"
        else
          NPM_TAG="latest"
        fi
        
        echo "Publishing to npm with tag: $NPM_TAG"
        npm publish --access public --tag $NPM_TAG
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
    - name: Post-publish validation
      run: |
        echo "Waiting for npm registry to update..."
        sleep 30
        
        # Determine which tag to check
        if [[ "$NEW_VERSION" == *"alpha"* ]]; then
          NPM_TAG="alpha"
        elif [[ "$NEW_VERSION" == *"beta"* ]]; then
          NPM_TAG="beta"
        elif [[ "$NEW_VERSION" == *"rc"* ]]; then
          NPM_TAG="rc"
        else
          NPM_TAG="latest"
        fi
        
        # Verify the package was published with correct tag
        PUBLISHED_VERSION=$(npm view visilog@$NPM_TAG version)
        echo "Published version on $NPM_TAG tag: $PUBLISHED_VERSION"
        echo "Expected version: $NEW_VERSION"
        
        if [[ "$PUBLISHED_VERSION" == "$NEW_VERSION" ]]; then
          echo "✅ Package successfully published to npm with tag: $NPM_TAG"
        else
          echo "❌ Version mismatch in npm registry"
          exit 1
        fi 